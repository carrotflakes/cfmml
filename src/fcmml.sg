start = @*firstItem

firstItem = (ignore | defineMacro | metaInfo | refMacro | newTrack | other)

item = (ignore | defineMacro | refMacro | other)

ignore = +([ \t\r\n] | comment)

defineMacro =
  "#"
  {
    name: identifier
    parameters: @?(
      __ "(" __
      ?(
        identifier
        *(
          __ ";" __
          identifier
        )
      )
      __ ")"
    )
    __ "=" __
    content: @+item
    ";"
    type: \"defMacro"
  }

metaInfo =
  "#"
  {
    name: `([A-Z] *[A-Z0-9_])
    __ ":"
    content: `*[^\r\n]
    ([\r\n] | !.)
    type: \"metaInfo"
  }

refMacro =
  {
    name: identifier
    arguments: @?(
      __ "(" __
      ?(
        @+item
        *(
          __ ";" __
          @+item
        )
      )
      __ ")"
    )
    type: \"refMacro"
  }

// mml中のコメントは！？
other =
  {
    content: `+(!ignore !"/*" [^#();A-Z])
    type: \"other"
  }
  |
  "(" {type: \"("}
  *item
  ")" {type: \")"}


newTrack =
  ";" __
  {
    type: \"newTrack"
  }


__ =
  ?+([ \t\r\n] | comment)

comment =
  '//' *[^\n] ('\n' | !.) | '/*' *([^*] | '*' [^/]) '*/'

identifier =
  `([A-Z] *[A-Z_])




start =
  __
  {
    macros: defineMacros
    tracks: defineTracks
  }

defineMacros =
  @*(defineMacro __)
  -> {
    var obj = {};
    for (var i = 0; i < $.length; ++i)
      obj[$[i].name] = {parameters: $[i].parameters, score: $[i].score};
    return obj;
  }

defineMacro =
  {
    "#"
    name: identifier
    parameters: @?(
      __ "(" __
      ?(
        identifier
        *(
          __ "," __
          identifier
        )
      )
      __ ")"
    )
    __ "=" __
    score: score
    ";"
  }

defineTracks =
  @(defineTrack *(__ ";" __ defineTrack __))

defineTrack =
  {
    introScore: score
    loopScore: (
      "$" __
      score
      |
      \null
    )
  }

score =
  @*(command __)

command =
  parallel |
  note |
  polyphonicNote |
  setOctave |
  setLength |
  setVolume |
  setVelocity |
  setTempo |
  setQuantize |
  setAbsoluteQuantize |
  setPortamento |
  setPan |
  setTranspose |
  setKey |
  setParameter |
  group |
  beatSequence |
  macro |
  setSynth |
  jump

note =
  {
    (
      pitch: pitch
      ?(
        __ "*" __
        ?(
          pitchToOctave: setOctave
          __
        )
        pitchTo: pitch
      )
      type: \"note"
      |
      "r"
      type: \"rest"
    )
    __
    length: length
    slur: ?(
      __ "&" \true |
      \false
    )
  }

polyphonicNote =
  "'" __
  {
    (
      chord: chord
      |
      pitchs: @*(pitch __ | setOctave __)
    )
    type: \"polyphonicNote"
    "'" __
    length: length
  }

pitch =
  {
    name: `[a-g]
    accidental: (
      "-" \-1 |
      "+" \1 |
      \0
    )
  }

length =
  {
    number: (naturalNumber | \0)
    dots: `*"." -> {return $.length;}
    tie: (
      __ "^" __ length |
      \null
    )
  }

setOctave =
  {
    "o" __
    (
      sign: ("+" \1 | "-" \-1)
      number: (naturalNumber | \null)
      type: \"relativeOctave"
      |
      number: (naturalNumber | \4)
      type: \"octave"
    ) |
    number: (
      `+">" -> {return $.length;}
      |
      `+"<" -> {return -$.length;}
    )
    type: \"octaveShift"
  }

setLength =
  "l" __
  {
    length: length
    type: \"length"
  }

setVolume =
  "v" __
  {
    sign: ("+" \1 | "-" \-1)
    number: (naturalNumber | \null)
    type: \"relativeVolume"
    |
    number: (naturalNumber | \64)
    type: \"volume"
  }

setVelocity =
  "y" __
  {
    sign: ("+" \1 | "-" \-1)
    number: (naturalNumber | \null)
    type: \"relativeVelocity"
    |
    number: (naturalNumber | \48)
    type: \"velocity"
  }

setTempo =
  "t" __
  {
    sign: ("+" \1 | "-" \-1)
    number: (realNumber | \null)
    type: \"relativeTempo"
    |
    number: (realNumber | \120)
    type: \"tempo"
  }

setQuantize =
  "q" __
  {
    sign: ("+" \1 | "-" \-1)
    number: (naturalNumber | \null)
    type: \"relativeQuantize"
    |
    number: (naturalNumber | \60)
    type: \"quantize"
  }

setAbsoluteQuantize =
  "@q" __
  {
    sign: ("+" \1 | "-" \-1)
    number: (naturalNumber | \null)
    type: \"relativeAbsoluteQuantize"
    |
    number: (naturalNumber | \192)
    type: \"absoluteQuantize"
  }

setPortamento =
  "@u" __
  {
    sign: ("+" \1 | "-" \-1)
    number: (naturalNumber | \null)
    type: \"relativePortamento"
    |
    number: (naturalNumber | \0)
    type: \"portamento"
  }

setPan =
  "p" __
  {
    sign: ("+" \1 | "-" \-1)
    number: (naturalNumber | \null)
    type: \"relativePan"
    |
    number: (naturalNumber | \32)
    type: \"pan"
  }

setTranspose =
  "kt" __
  {
    sign: ("+" \1 | "-" \-1)
    number: (naturalNumber | \null)
    type: \"relativeTranspose"
    |
    number: (naturalNumber | \64)
    type: \"transpose"
  }

setKey =
  "k" __ "(" __
  {
    key: `([A-G] ?([+-]) ?"m")
    type: \"key"
    |
    accidentals: @?(pitch *(__ "," __ pitch))
    type: \"keyAccidentals"
  }
  __ ")"

setParameter =
  {
    name: `[wx]
    __
    (
      sign: ("+" \1 | "-" \-1)
      number: (naturalNumber | \null)
      type: \"relativeParameter"
      |
      number: (naturalNumber | \0)
      type: \"parameter"
    )
  }

group =
  "[" __
  {
    length: length -> {return $.number === 0 && $.dots === 0 && $.tie === null ? null : $;}
    score: score
    jointScore: (
      __ "|" __ score |
      \null
    )
    __ "]" __
    times: (naturalNumber __ | \1)
    type: \"group"
  }

parallel =
  {
    command: command
    __ "/"
    type: \"parallel"
  }

beatSequence =
  "{" __
  {
    beats: @beatSequenceBeats
    type: \"beatSequence"
  }

beatSequenceBeats =
  {
    beatLength: length __
    __
    commands: @*(beatSequenceCommand __)
    holdOff: ("," \false | ("|" | "}") \true)
    __
  }
  ?beatSequenceBeats

beatSequenceCommand =
  beatSequenceNote |
  beatSequencePolyphonicNote |
  setOctave |
  setLength |
  setVolume |
  setVelocity |
  setTempo |
  setQuantize |
  setAbsoluteQuantize |
  setPortamento |
  setPan |
  setTranspose |
  setKey |
  setParameter |
  macro |
  setSynth |
  jump

beatSequenceNote =
  {
    pitch: pitch
    ?(
      __ "*" __
      ?(
        pitchToOctave: setOctave
        __
      )
      pitchTo: pitch
    )
    type: \"bsNote"
    __
    length: (naturalNumber | \null)
    slur: ?(  // XXX
      __ "&" \true |
      \false
    )
  }

beatSequencePolyphonicNote =
  "'" __
  {
    (
      chord: chord
      |
      pitchs: @*(pitch __ | setOctave __)
    )
    type: \"bsPolyphonicNote"
    "'" __
    length: length
  }

macro =
  {
    name: identifier
    arguments: @?(
      __ "(" __
      ?(
        score
        *(
          __ "," __
          score
        )
      )
      __ ")"
    )
    type: \"macro"
  }

setSynth =
  "%" __
  {
    type: \"synth"
    synth: nodeExpressions
  }

jump =
  "!" __
  {
    type: \"jump"
  }

__ =
  ?+[ \t\r\n]

comment =
  '//' *[^\n] ('\n' | !.) | '/*' *([^*] | '*' [^/]) '*/'

identifier =
  `([A-Z] *[A-Z_])

nodeIdentifier =
  `([a-z] *[a-z0-9_])

naturalNumber =
  `([1-9] *[0-9] | '0') -> eval

signedNumber =
  `([+-] ([1-9] *[0-9] | '0')) -> eval

realNumber =
  `(([1-9] *[0-9] | '0') ?("." ,4*[0-9])) -> eval

signedRealNumber =
  `([+-] ([1-9] *[0-9] | '0') ?("." ,4*[0-9])) -> eval

/////////////////////////////////////////////////////////////

chord =
  {
    root: (pitchName | degreeName)
    (base | third fifth sixthOrSeventh) tensions
    ?inversion
  }

base =
  (
    "5"
    fifth: \0
  |  "sus4"
    third: \1
    fifth: \0
  |  "7sus4"
    third: \1
    fifth: \0
    seventh: \0
  |  "dim"
    third: \-1
    fifth: \-1
    ?(
      "7"
      seventh: \-1
    )
  )

third =
  third: (
    "m" \-1
  |  \0
  )

fifth =
  fifth: (
    "alt" \-1
  |  "aug" \1
  |  \0
  )

sixthOrSeventh =
  ?(
    "6"
    sixth: \0
  |  seventh: (
      "7" \0
    | "M7" \1
    )
  )

tensions =
  ?(ninth: (
    "-9" \-1
  |  "+9" \1
  |  "9" \0
  ))
  ?(eleventh: (
    "-11" \-1
  |  "+11" \1
  |  "11" \0
  ))
  ?(thirteenth: (
    "-13" \-1
  |  "+13" \1
  |  "13" \0
  ))

inversion =
  ":"
  inversion: `(?"-" +[0-9]) -> {return eval($);}

pitchName =
  {
    name: `[A-G]
    accidental: (
      "-" \-1 |
      "+" \1 |
      \0
    )
  }

degreeName =
  {
    accidental: (
      "-" \-1 |
      "+" \1 |
      \0
    )
    degree: `[1-7]
  }

/////////////////////////////////////////////////////////////

nodeExpressions =
  {
    nodeAssigns: @(
      *(
        nodeAssign __ "," __
      )
    )
    outputNodes: nodes
    __ ?"."
  }

nodeAssign =
  {
    name: nodeIdentifier
    __ "=" __
    nodes: nodes
  }

nodes =
  @(node __ *("+" __ node __))

nodes_ =
  @?(node __ *("+" __ node __))

node =
  {
    type: `"gain"
    __ "(" __
    inputs: nodes_
    "," __
    gainEnv: envelope
    __
    (
      "," __
      gainLfo: nodes_ |
      gainLfo: @""
    )
    ")"
  } | {
    type: `("sin" | "sqr" | "saw" | "tri")
    __ "(" __
    freqEnv: envelope
    __
    (
      "," __
      freqLfo: nodes_
      ?(
        "," __
        delay: valueExpression
      )
      |
      freqLfo: @""
    )
    ")"
  } | {
    type: `("lpf" | "hpf" | "bpf" | "ncf" | "apf")
    __ "(" __
    inputs: nodes_
    "," __
    freqEnv: envelope
    __ "," __
    freqLfo: nodes_
    __ "," __
    QEnv: envelope
    __ "," __
    QLfo: nodes_
    ")"
  } | {
    type: `("lsf" | "hsf")
    __ "(" __
    inputs: nodes_
    "," __
    freqEnv: envelope
    __ "," __
    freqLfo: nodes_
    __ "," __
    gainEnv: envelope
    __ "," __
    gainLfo: nodes_
    ")"
  } | {
    type: `("pkf")
    __ "(" __
    inputs: nodes_
    "," __
    freqEnv: envelope
    __ "," __
    freqLfo: nodes_
    __ "," __
    QEnv: envelope
    __ "," __
    QLfo: nodes_
    __ "," __
    gainEnv: envelope
    __ "," __
    gainLfo: nodes_
    ")"
  } | {
    type: \"ref"
    name: nodeIdentifier
  } | {
    type: `"pan"
    __ "(" __
    inputs: nodes_
    "," __
    pan: valueExpression
    ")"
  }

envelope =
  {
    type: `"freq"
    __ "(" __
    f: valueExpression
    __ ")"
  } | {
    type: `"lv"
    __ "(" __
    lv: valueExpression
    __ ")"
  } | {
    type: `("perc" | "adsr" | "adshr" | "ar" | "dadsr" | "ahdsfr" | "ahr" | "pluck" | "l4r4")
    __ "(" __
    args: @(valueExpression *(__ "," __ valueExpression))
    __ ")"
  }


valueExpression =
  `valueExpression_

valueExpression_ =
  (valueExpression_ __ "*" __ valueExpression_) |
  (valueExpression_ __ "/" __ valueExpression_) |
  (valueExpression_ __ "+" __ valueExpression_) |
  (valueExpression_ __ "-" __ valueExpression_) |
  ("(" __ valueExpression_ __ ")") |
  (
    ?"-" ([1-9] *[0-9] | "0") ?("." *[0-9]) |
    "f" |
    "v" |
    "w" |
    "x" |
    "n" |
    "b"
  )

