start = _ many<command> _

command
= parallel
| macroDefinition
| macro
| track
| note
| polyphonicNote
| octave
| setLength
| quantize
| absoluteQuantize
| velocity
| volume
| pan
| synthParam
| transpose
| key
| tempo
| group
| segno
| synth

parallel = {
  command: command
  _ "/"
  type:=parallel
}

macroDefinition = {
  identifier: identifier
  _
  parameters: ("(" _ sepBy<identifier, ","> _ ")" | \[])
  _ "=" _
  commands: many<command>
  _ ";"
  type:=macroDefinition
}

macro = {
  identifier: identifier
  _
  arguments: ("(" _ sepBy<many<command>, ","> _ ")" | \[])
  type:=macro
}

track = {
  "@" _
  number: unsignedInteger
  type:=track
}

note = {
  pitch: pitch
  pitchTo: (
    {
      _ "*" _
      preCommands: (many<octave> _)
      pitch: pitch
    }
  |
    \null
  )
  length: (_ length)
  slur: (_ "&" \true | \false)
  type:=note
|
  "r"
  length: (_ length)
  type:=rest
}

polyphonicNote = {
  "'" _
  (
    chord: chord
  |
    pitches: many<pitch | octave>
  )
  "'" _
  length: length
  type:=polyphonicNote
}

pitch = {
  name: `[a-g]
  _
  accidental: ("+" \1 | "-" \-1 | \0)
}

octave = {
  "o" _
  number: signedInteger
  type:=relativeOctave
|
  "o" _
  number: (unsignedInteger | \4)
  type:=octave
|
  number: (">" \1 | "<" \-1)
  type:=relativeOctave
}

length = {
  number: (unsignedInteger | \null)
  _
  dots: `*("." _) -> { return $.length; }
  tie: ("^" _ length _ | \null)
}

setLength = {
  "l" _
  length: length
  type:=length
}

quantize = {
  "q" _
  number: unsignedInteger
  type:=quantize
|
  "q" _
  number: signedInteger
  type:=relativeQuantize
}

absoluteQuantize = {
  "@q" _
  number: unsignedInteger
  type:=absoluteQuantize
|
  "@" _
  number: signedInteger
  type:=relativeAbsoluteQuantize
}

transpose = {
  "kt" _
  number: unsignedInteger
  type:=transpose
|
  "kt" _
  number: signedInteger
  type:=relativeTranspose
}

key = {
  "k" _ "(" _
  (
    key: `([A-G] ?([+-]) ?"m")
    type:=key
  |
    pitchs: sepBy<pitch, ",">
    type:=key
  )
  _ ")"
}

velocity = {
  "y" _
  number: unsignedInteger
  type:=velocity
|
  "y" _
  number: signedInteger
  type:=relativeVelocity
}

volume = {
  "v" _
  number: signedInteger
  type:=relativeVolume
|
  "v" _
  number: (unsignedInteger | \64)
  type:=volume
}

pan = {
  "p" _
  number: signedInteger
  type:=relativePan
|
  "p" _
  number: (unsignedInteger | \64)
  type:=pan
}

synthParam = {
  name: `("w" | "x") _
  number: signedInteger
  type:=relativeSynthParam
|
  name: `("w" | "x") _
  number: (unsignedInteger | \0)
  type:=synthParam
}

tempo = {
  "t" _
  number: (&[+-] float)
  type:=relativeTempo
|
  "t" _
  number: (![+-]float | \120)
  type:=tempo
}

group = {
  "[" _
  length: length
  _
  commands: many<command>
  _
  jointCommands: (
    "|" _ many<command>
  |
    \[]
  )
  _ "]" _
  times: (unsignedInteger | \1)
  type:=group
}

segno = {
  "$"
  type:=segno
}

synth = {
 "%" _
  assignments: sepBy<{
    identifier: expIdentifier
    _ "=" _
    expression: operator1
    type:=assignment
  }, ",">
  _
  body: operator1
  type:=synth
}

operator1 = operator<operator1, operator2, `"<-", operator2>
operator2 = operator<operator2, operator3, `("+" | "-"), operator3>
operator3 = operator<operator3, operator4, `("*" | "/"), operator4>
operator4 = factor

operator<left, right, op, next> = {
  left: left
  _
  func: op
  _
  right: right
  type:=call
} -> {$.arguments = [$.left, $.right]; return $;} | next

factor = {
  func: expIdentifier
  _ "(" _
  arguments: sepBy<operator1, ",">
  _ ")"
  type:=call
|
  identifier: expIdentifier
  type:=identifier
|
  value: float
  type:=value
}
| (
  "(" _ operator1 _ ")"
)

expIdentifier = `([a-z] *[a-z0-9])

//////////

identifier = `([A-Z] *[A-Za-z0-9])

signedInteger = `([+-]([1-9] *[0-9] | "0")) -> { return parseInt($); }
unsignedInteger = `([1-9] *[0-9] | "0") -> { return parseInt($); }
float = `(?[+-] ([1-9] *[0-9] | '0') ?("." ,16*[0-9])) -> { return parseInt($); }

_ = *(whitespace | comment)

whitespace = +[ \t\r\n]

comment = "//" *[^\n] ("\n" | !.) | "/*" *([^*] | '*' [^/]) "*/"

many<x> = @?(x *(_ x))
many1<x> = @(x *(_ x))
sepBy<x, sep> = @?(x *(_ sep _ x))
sepEndBy<x, sep> = @?(x *(_ sep _ x) ?(_ sep))
sepBy1<x, sep> = @(x *(_ sep _ x))
sepEndBy1<x, sep> = @(x *(_ sep _ x) ?(_ sep))

//////////

chord = {
  root: (pitchName | degreeName)
  (base | third fifth sixthOrSeventh) tensions
  ?inversion
}

base = (
  "5"
  fifth: \0
|
  "sus4"
  third: \1
  fifth: \0
| "7sus4"
  third: \1
  fifth: \0
  seventh: \0
| "dim"
  third: \-1
  fifth: \-1
  ?(
    "7"
    seventh: \-1
  )
)

third =
  third: ("m" \-1 | \0)

fifth =
  fifth: (
    "alt" \-1
  |
    "aug" \1
  |
    \0
  )

sixthOrSeventh = ?(
  "6"
  sixth: \0
|
  seventh: (
    "7" \0
  |
    "M7" \1
  )
)

tensions = ?(
  ninth: (
    "-9" \-1
  |
    "+9" \1
  |
    "9" \0
  )
)
?(
  eleventh: (
    "-11" \-1
  |
    "+11" \1
  |
    "11" \0
  )
)
?(
  thirteenth: (
    "-13" \-1
  |
    "+13" \1
  |
    "13" \0
  )
)

inversion =
  ":"
  inversion: `(?"-" +[0-9]) -> { return parseInt($); }

pitchName = {
  name: `[A-G]
  accidental: ("-" \-1 | "+" \1 | \0)
}

degreeName = {
  accidental: ("-" \-1 | "+" \1 | \0)
  degree: `[1-7]
}
